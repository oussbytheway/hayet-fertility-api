package com.hayet.fertility.domain;

import static com.hayet.fertility.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class ReminderAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReminderAllPropertiesEquals(Reminder expected, Reminder actual) {
        assertReminderAutoGeneratedPropertiesEquals(expected, actual);
        assertReminderAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReminderAllUpdatablePropertiesEquals(Reminder expected, Reminder actual) {
        assertReminderUpdatableFieldsEquals(expected, actual);
        assertReminderUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReminderAutoGeneratedPropertiesEquals(Reminder expected, Reminder actual) {
        assertThat(expected)
            .as("Verify Reminder auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReminderUpdatableFieldsEquals(Reminder expected, Reminder actual) {
        assertThat(expected)
            .as("Verify Reminder relevant properties")
            .satisfies(e -> assertThat(e.getMotif()).as("check motif").isEqualTo(actual.getMotif()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getChannels()).as("check channels").isEqualTo(actual.getChannels()))
            .satisfies(e -> assertThat(e.getNote()).as("check note").isEqualTo(actual.getNote()))
            .satisfies(e ->
                assertThat(e.getSentAt()).as("check sentAt").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getSentAt())
            )
            .satisfies(e ->
                assertThat(e.getResolvedAt())
                    .as("check resolvedAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getResolvedAt())
            )
            .satisfies(e ->
                assertThat(e.getCreated()).as("check created").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getCreated())
            )
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e ->
                assertThat(e.getUpdated()).as("check updated").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getUpdated())
            )
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getRepeatEvery()).as("check repeatEvery").isEqualTo(actual.getRepeatEvery()))
            .satisfies(e -> assertThat(e.getRepeatPattern()).as("check repeatPattern").isEqualTo(actual.getRepeatPattern()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReminderUpdatableRelationshipsEquals(Reminder expected, Reminder actual) {
        assertThat(expected)
            .as("Verify Reminder relationships")
            .satisfies(e -> assertThat(e.getClient()).as("check client").isEqualTo(actual.getClient()));
    }
}
