package com.hayet.fertility.domain;

import static com.hayet.fertility.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class MessageInstanceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMessageInstanceAllPropertiesEquals(MessageInstance expected, MessageInstance actual) {
        assertMessageInstanceAutoGeneratedPropertiesEquals(expected, actual);
        assertMessageInstanceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMessageInstanceAllUpdatablePropertiesEquals(MessageInstance expected, MessageInstance actual) {
        assertMessageInstanceUpdatableFieldsEquals(expected, actual);
        assertMessageInstanceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMessageInstanceAutoGeneratedPropertiesEquals(MessageInstance expected, MessageInstance actual) {
        assertThat(expected)
            .as("Verify MessageInstance auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMessageInstanceUpdatableFieldsEquals(MessageInstance expected, MessageInstance actual) {
        assertThat(expected)
            .as("Verify MessageInstance relevant properties")
            .satisfies(e -> assertThat(e.getContent()).as("check content").isEqualTo(actual.getContent()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getChannel()).as("check channel").isEqualTo(actual.getChannel()))
            .satisfies(e ->
                assertThat(e.getSentAt()).as("check sentAt").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getSentAt())
            )
            .satisfies(e ->
                assertThat(e.getDeliveredAt())
                    .as("check deliveredAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getDeliveredAt())
            )
            .satisfies(e ->
                assertThat(e.getFailedAt()).as("check failedAt").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getFailedAt())
            )
            .satisfies(e -> assertThat(e.getDeliveryAttempts()).as("check deliveryAttempts").isEqualTo(actual.getDeliveryAttempts()))
            .satisfies(e -> assertThat(e.getErrorMessage()).as("check errorMessage").isEqualTo(actual.getErrorMessage()))
            .satisfies(e ->
                assertThat(e.getCreated()).as("check created").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getCreated())
            )
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e ->
                assertThat(e.getUpdated()).as("check updated").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getUpdated())
            )
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMessageInstanceUpdatableRelationshipsEquals(MessageInstance expected, MessageInstance actual) {
        assertThat(expected)
            .as("Verify MessageInstance relationships")
            .satisfies(e -> assertThat(e.getClient()).as("check client").isEqualTo(actual.getClient()))
            .satisfies(e -> assertThat(e.getMessage()).as("check message").isEqualTo(actual.getMessage()));
    }
}
