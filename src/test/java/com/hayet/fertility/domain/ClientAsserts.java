package com.hayet.fertility.domain;

import static com.hayet.fertility.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class ClientAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAllPropertiesEquals(Client expected, Client actual) {
        assertClientAutoGeneratedPropertiesEquals(expected, actual);
        assertClientAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAllUpdatablePropertiesEquals(Client expected, Client actual) {
        assertClientUpdatableFieldsEquals(expected, actual);
        assertClientUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAutoGeneratedPropertiesEquals(Client expected, Client actual) {
        assertThat(expected)
            .as("Verify Client auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientUpdatableFieldsEquals(Client expected, Client actual) {
        assertThat(expected)
            .as("Verify Client relevant properties")
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getPhone()).as("check phone").isEqualTo(actual.getPhone()))
            .satisfies(e -> assertThat(e.getWhatsapp()).as("check whatsapp").isEqualTo(actual.getWhatsapp()))
            .satisfies(e ->
                assertThat(e.getNotificationPreference()).as("check notificationPreference").isEqualTo(actual.getNotificationPreference())
            )
            .satisfies(e -> assertThat(e.getNote()).as("check note").isEqualTo(actual.getNote()))
            .satisfies(e -> assertThat(e.getGender()).as("check gender").isEqualTo(actual.getGender()))
            .satisfies(e -> assertThat(e.getBirthDate()).as("check birthDate").isEqualTo(actual.getBirthDate()))
            .satisfies(e -> assertThat(e.getLanguage()).as("check language").isEqualTo(actual.getLanguage()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getReminderCount()).as("check reminderCount").isEqualTo(actual.getReminderCount()))
            .satisfies(e -> assertThat(e.getTags()).as("check tags").isEqualTo(actual.getTags()))
            .satisfies(e ->
                assertThat(e.getCreated()).as("check created").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getCreated())
            )
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e ->
                assertThat(e.getUpdated()).as("check updated").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getUpdated())
            )
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientUpdatableRelationshipsEquals(Client expected, Client actual) {
        // empty method
    }
}
